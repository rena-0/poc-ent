// Code generated by ent, DO NOT EDIT.

package airport

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the airport type in the database.
	Label = "airport"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIdent holds the string denoting the ident field in the database.
	FieldIdent = "ident"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLatitudeDeg holds the string denoting the latitude_deg field in the database.
	FieldLatitudeDeg = "latitude_deg"
	// FieldLongitudeDeg holds the string denoting the longitude_deg field in the database.
	FieldLongitudeDeg = "longitude_deg"
	// FieldElevationFt holds the string denoting the elevation_ft field in the database.
	FieldElevationFt = "elevation_ft"
	// FieldContinent holds the string denoting the continent field in the database.
	FieldContinent = "continent"
	// FieldIsoCountry holds the string denoting the iso_country field in the database.
	FieldIsoCountry = "iso_country"
	// FieldIsoRegion holds the string denoting the iso_region field in the database.
	FieldIsoRegion = "iso_region"
	// FieldMunicipality holds the string denoting the municipality field in the database.
	FieldMunicipality = "municipality"
	// FieldScheduledService holds the string denoting the scheduled_service field in the database.
	FieldScheduledService = "scheduled_service"
	// FieldGpsCode holds the string denoting the gps_code field in the database.
	FieldGpsCode = "gps_code"
	// FieldLocalCode holds the string denoting the local_code field in the database.
	FieldLocalCode = "local_code"
	// Table holds the table name of the airport in the database.
	Table = "airports"
)

// Columns holds all SQL columns for airport fields.
var Columns = []string{
	FieldID,
	FieldIdent,
	FieldType,
	FieldName,
	FieldLatitudeDeg,
	FieldLongitudeDeg,
	FieldElevationFt,
	FieldContinent,
	FieldIsoCountry,
	FieldIsoRegion,
	FieldMunicipality,
	FieldScheduledService,
	FieldGpsCode,
	FieldLocalCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IdentValidator is a validator for the "ident" field. It is called by the builders before save.
	IdentValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ContinentValidator is a validator for the "continent" field. It is called by the builders before save.
	ContinentValidator func(string) error
	// IsoCountryValidator is a validator for the "iso_country" field. It is called by the builders before save.
	IsoCountryValidator func(string) error
	// IsoRegionValidator is a validator for the "iso_region" field. It is called by the builders before save.
	IsoRegionValidator func(string) error
	// MunicipalityValidator is a validator for the "municipality" field. It is called by the builders before save.
	MunicipalityValidator func(string) error
	// ScheduledServiceValidator is a validator for the "scheduled_service" field. It is called by the builders before save.
	ScheduledServiceValidator func(string) error
	// GpsCodeValidator is a validator for the "gps_code" field. It is called by the builders before save.
	GpsCodeValidator func(string) error
	// LocalCodeValidator is a validator for the "local_code" field. It is called by the builders before save.
	LocalCodeValidator func(string) error
)

// OrderOption defines the ordering options for the Airport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIdent orders the results by the ident field.
func ByIdent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdent, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLatitudeDeg orders the results by the latitude_deg field.
func ByLatitudeDeg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatitudeDeg, opts...).ToFunc()
}

// ByLongitudeDeg orders the results by the longitude_deg field.
func ByLongitudeDeg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongitudeDeg, opts...).ToFunc()
}

// ByElevationFt orders the results by the elevation_ft field.
func ByElevationFt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElevationFt, opts...).ToFunc()
}

// ByContinent orders the results by the continent field.
func ByContinent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContinent, opts...).ToFunc()
}

// ByIsoCountry orders the results by the iso_country field.
func ByIsoCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsoCountry, opts...).ToFunc()
}

// ByIsoRegion orders the results by the iso_region field.
func ByIsoRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsoRegion, opts...).ToFunc()
}

// ByMunicipality orders the results by the municipality field.
func ByMunicipality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMunicipality, opts...).ToFunc()
}

// ByScheduledService orders the results by the scheduled_service field.
func ByScheduledService(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledService, opts...).ToFunc()
}

// ByGpsCode orders the results by the gps_code field.
func ByGpsCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGpsCode, opts...).ToFunc()
}

// ByLocalCode orders the results by the local_code field.
func ByLocalCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalCode, opts...).ToFunc()
}
