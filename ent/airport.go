// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rena-0/poc-ent/ent/airport"
)

// Airport is the model entity for the Airport schema.
type Airport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ident holds the value of the "ident" field.
	Ident string `json:"ident,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LatitudeDeg holds the value of the "latitude_deg" field.
	LatitudeDeg float64 `json:"latitude_deg,omitempty"`
	// LongitudeDeg holds the value of the "longitude_deg" field.
	LongitudeDeg float64 `json:"longitude_deg,omitempty"`
	// ElevationFt holds the value of the "elevation_ft" field.
	ElevationFt int `json:"elevation_ft,omitempty"`
	// Continent holds the value of the "continent" field.
	Continent string `json:"continent,omitempty"`
	// IsoCountry holds the value of the "iso_country" field.
	IsoCountry string `json:"iso_country,omitempty"`
	// IsoRegion holds the value of the "iso_region" field.
	IsoRegion string `json:"iso_region,omitempty"`
	// Municipality holds the value of the "municipality" field.
	Municipality string `json:"municipality,omitempty"`
	// ScheduledService holds the value of the "scheduled_service" field.
	ScheduledService string `json:"scheduled_service,omitempty"`
	// GpsCode holds the value of the "gps_code" field.
	GpsCode string `json:"gps_code,omitempty"`
	// LocalCode holds the value of the "local_code" field.
	LocalCode    string `json:"local_code,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Airport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case airport.FieldLatitudeDeg, airport.FieldLongitudeDeg:
			values[i] = new(sql.NullFloat64)
		case airport.FieldID, airport.FieldElevationFt:
			values[i] = new(sql.NullInt64)
		case airport.FieldIdent, airport.FieldType, airport.FieldName, airport.FieldContinent, airport.FieldIsoCountry, airport.FieldIsoRegion, airport.FieldMunicipality, airport.FieldScheduledService, airport.FieldGpsCode, airport.FieldLocalCode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Airport fields.
func (a *Airport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case airport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case airport.FieldIdent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ident", values[i])
			} else if value.Valid {
				a.Ident = value.String
			}
		case airport.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = value.String
			}
		case airport.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case airport.FieldLatitudeDeg:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude_deg", values[i])
			} else if value.Valid {
				a.LatitudeDeg = value.Float64
			}
		case airport.FieldLongitudeDeg:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude_deg", values[i])
			} else if value.Valid {
				a.LongitudeDeg = value.Float64
			}
		case airport.FieldElevationFt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field elevation_ft", values[i])
			} else if value.Valid {
				a.ElevationFt = int(value.Int64)
			}
		case airport.FieldContinent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field continent", values[i])
			} else if value.Valid {
				a.Continent = value.String
			}
		case airport.FieldIsoCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iso_country", values[i])
			} else if value.Valid {
				a.IsoCountry = value.String
			}
		case airport.FieldIsoRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iso_region", values[i])
			} else if value.Valid {
				a.IsoRegion = value.String
			}
		case airport.FieldMunicipality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field municipality", values[i])
			} else if value.Valid {
				a.Municipality = value.String
			}
		case airport.FieldScheduledService:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_service", values[i])
			} else if value.Valid {
				a.ScheduledService = value.String
			}
		case airport.FieldGpsCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gps_code", values[i])
			} else if value.Valid {
				a.GpsCode = value.String
			}
		case airport.FieldLocalCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_code", values[i])
			} else if value.Valid {
				a.LocalCode = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Airport.
// This includes values selected through modifiers, order, etc.
func (a *Airport) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Airport.
// Note that you need to call Airport.Unwrap() before calling this method if this Airport
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Airport) Update() *AirportUpdateOne {
	return NewAirportClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Airport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Airport) Unwrap() *Airport {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Airport is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Airport) String() string {
	var builder strings.Builder
	builder.WriteString("Airport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("ident=")
	builder.WriteString(a.Ident)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(a.Type)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("latitude_deg=")
	builder.WriteString(fmt.Sprintf("%v", a.LatitudeDeg))
	builder.WriteString(", ")
	builder.WriteString("longitude_deg=")
	builder.WriteString(fmt.Sprintf("%v", a.LongitudeDeg))
	builder.WriteString(", ")
	builder.WriteString("elevation_ft=")
	builder.WriteString(fmt.Sprintf("%v", a.ElevationFt))
	builder.WriteString(", ")
	builder.WriteString("continent=")
	builder.WriteString(a.Continent)
	builder.WriteString(", ")
	builder.WriteString("iso_country=")
	builder.WriteString(a.IsoCountry)
	builder.WriteString(", ")
	builder.WriteString("iso_region=")
	builder.WriteString(a.IsoRegion)
	builder.WriteString(", ")
	builder.WriteString("municipality=")
	builder.WriteString(a.Municipality)
	builder.WriteString(", ")
	builder.WriteString("scheduled_service=")
	builder.WriteString(a.ScheduledService)
	builder.WriteString(", ")
	builder.WriteString("gps_code=")
	builder.WriteString(a.GpsCode)
	builder.WriteString(", ")
	builder.WriteString("local_code=")
	builder.WriteString(a.LocalCode)
	builder.WriteByte(')')
	return builder.String()
}

// Airports is a parsable slice of Airport.
type Airports []*Airport
