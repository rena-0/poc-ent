// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rena-0/poc-ent/ent/airport"
	"github.com/rena-0/poc-ent/ent/predicate"
	"github.com/rena-0/poc-ent/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAirport = "Airport"
	TypeUser    = "User"
)

// AirportMutation represents an operation that mutates the Airport nodes in the graph.
type AirportMutation struct {
	config
	op                Op
	typ               string
	id                *int
	ident             *string
	_type             *string
	name              *string
	latitude_deg      *float64
	addlatitude_deg   *float64
	longitude_deg     *float64
	addlongitude_deg  *float64
	elevation_ft      *int
	addelevation_ft   *int
	continent         *string
	iso_country       *string
	iso_region        *string
	municipality      *string
	scheduled_service *string
	gps_code          *string
	local_code        *string
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Airport, error)
	predicates        []predicate.Airport
}

var _ ent.Mutation = (*AirportMutation)(nil)

// airportOption allows management of the mutation configuration using functional options.
type airportOption func(*AirportMutation)

// newAirportMutation creates new mutation for the Airport entity.
func newAirportMutation(c config, op Op, opts ...airportOption) *AirportMutation {
	m := &AirportMutation{
		config:        c,
		op:            op,
		typ:           TypeAirport,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAirportID sets the ID field of the mutation.
func withAirportID(id int) airportOption {
	return func(m *AirportMutation) {
		var (
			err   error
			once  sync.Once
			value *Airport
		)
		m.oldValue = func(ctx context.Context) (*Airport, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Airport.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAirport sets the old Airport of the mutation.
func withAirport(node *Airport) airportOption {
	return func(m *AirportMutation) {
		m.oldValue = func(context.Context) (*Airport, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AirportMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AirportMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Airport entities.
func (m *AirportMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AirportMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AirportMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Airport.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdent sets the "ident" field.
func (m *AirportMutation) SetIdent(s string) {
	m.ident = &s
}

// Ident returns the value of the "ident" field in the mutation.
func (m *AirportMutation) Ident() (r string, exists bool) {
	v := m.ident
	if v == nil {
		return
	}
	return *v, true
}

// OldIdent returns the old "ident" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldIdent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdent: %w", err)
	}
	return oldValue.Ident, nil
}

// ResetIdent resets all changes to the "ident" field.
func (m *AirportMutation) ResetIdent() {
	m.ident = nil
}

// SetType sets the "type" field.
func (m *AirportMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *AirportMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AirportMutation) ResetType() {
	m._type = nil
}

// SetName sets the "name" field.
func (m *AirportMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AirportMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AirportMutation) ResetName() {
	m.name = nil
}

// SetLatitudeDeg sets the "latitude_deg" field.
func (m *AirportMutation) SetLatitudeDeg(f float64) {
	m.latitude_deg = &f
	m.addlatitude_deg = nil
}

// LatitudeDeg returns the value of the "latitude_deg" field in the mutation.
func (m *AirportMutation) LatitudeDeg() (r float64, exists bool) {
	v := m.latitude_deg
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitudeDeg returns the old "latitude_deg" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldLatitudeDeg(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitudeDeg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitudeDeg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitudeDeg: %w", err)
	}
	return oldValue.LatitudeDeg, nil
}

// AddLatitudeDeg adds f to the "latitude_deg" field.
func (m *AirportMutation) AddLatitudeDeg(f float64) {
	if m.addlatitude_deg != nil {
		*m.addlatitude_deg += f
	} else {
		m.addlatitude_deg = &f
	}
}

// AddedLatitudeDeg returns the value that was added to the "latitude_deg" field in this mutation.
func (m *AirportMutation) AddedLatitudeDeg() (r float64, exists bool) {
	v := m.addlatitude_deg
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitudeDeg resets all changes to the "latitude_deg" field.
func (m *AirportMutation) ResetLatitudeDeg() {
	m.latitude_deg = nil
	m.addlatitude_deg = nil
}

// SetLongitudeDeg sets the "longitude_deg" field.
func (m *AirportMutation) SetLongitudeDeg(f float64) {
	m.longitude_deg = &f
	m.addlongitude_deg = nil
}

// LongitudeDeg returns the value of the "longitude_deg" field in the mutation.
func (m *AirportMutation) LongitudeDeg() (r float64, exists bool) {
	v := m.longitude_deg
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitudeDeg returns the old "longitude_deg" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldLongitudeDeg(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitudeDeg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitudeDeg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitudeDeg: %w", err)
	}
	return oldValue.LongitudeDeg, nil
}

// AddLongitudeDeg adds f to the "longitude_deg" field.
func (m *AirportMutation) AddLongitudeDeg(f float64) {
	if m.addlongitude_deg != nil {
		*m.addlongitude_deg += f
	} else {
		m.addlongitude_deg = &f
	}
}

// AddedLongitudeDeg returns the value that was added to the "longitude_deg" field in this mutation.
func (m *AirportMutation) AddedLongitudeDeg() (r float64, exists bool) {
	v := m.addlongitude_deg
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitudeDeg resets all changes to the "longitude_deg" field.
func (m *AirportMutation) ResetLongitudeDeg() {
	m.longitude_deg = nil
	m.addlongitude_deg = nil
}

// SetElevationFt sets the "elevation_ft" field.
func (m *AirportMutation) SetElevationFt(i int) {
	m.elevation_ft = &i
	m.addelevation_ft = nil
}

// ElevationFt returns the value of the "elevation_ft" field in the mutation.
func (m *AirportMutation) ElevationFt() (r int, exists bool) {
	v := m.elevation_ft
	if v == nil {
		return
	}
	return *v, true
}

// OldElevationFt returns the old "elevation_ft" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldElevationFt(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldElevationFt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldElevationFt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldElevationFt: %w", err)
	}
	return oldValue.ElevationFt, nil
}

// AddElevationFt adds i to the "elevation_ft" field.
func (m *AirportMutation) AddElevationFt(i int) {
	if m.addelevation_ft != nil {
		*m.addelevation_ft += i
	} else {
		m.addelevation_ft = &i
	}
}

// AddedElevationFt returns the value that was added to the "elevation_ft" field in this mutation.
func (m *AirportMutation) AddedElevationFt() (r int, exists bool) {
	v := m.addelevation_ft
	if v == nil {
		return
	}
	return *v, true
}

// ResetElevationFt resets all changes to the "elevation_ft" field.
func (m *AirportMutation) ResetElevationFt() {
	m.elevation_ft = nil
	m.addelevation_ft = nil
}

// SetContinent sets the "continent" field.
func (m *AirportMutation) SetContinent(s string) {
	m.continent = &s
}

// Continent returns the value of the "continent" field in the mutation.
func (m *AirportMutation) Continent() (r string, exists bool) {
	v := m.continent
	if v == nil {
		return
	}
	return *v, true
}

// OldContinent returns the old "continent" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldContinent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContinent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContinent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContinent: %w", err)
	}
	return oldValue.Continent, nil
}

// ResetContinent resets all changes to the "continent" field.
func (m *AirportMutation) ResetContinent() {
	m.continent = nil
}

// SetIsoCountry sets the "iso_country" field.
func (m *AirportMutation) SetIsoCountry(s string) {
	m.iso_country = &s
}

// IsoCountry returns the value of the "iso_country" field in the mutation.
func (m *AirportMutation) IsoCountry() (r string, exists bool) {
	v := m.iso_country
	if v == nil {
		return
	}
	return *v, true
}

// OldIsoCountry returns the old "iso_country" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldIsoCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsoCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsoCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsoCountry: %w", err)
	}
	return oldValue.IsoCountry, nil
}

// ResetIsoCountry resets all changes to the "iso_country" field.
func (m *AirportMutation) ResetIsoCountry() {
	m.iso_country = nil
}

// SetIsoRegion sets the "iso_region" field.
func (m *AirportMutation) SetIsoRegion(s string) {
	m.iso_region = &s
}

// IsoRegion returns the value of the "iso_region" field in the mutation.
func (m *AirportMutation) IsoRegion() (r string, exists bool) {
	v := m.iso_region
	if v == nil {
		return
	}
	return *v, true
}

// OldIsoRegion returns the old "iso_region" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldIsoRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsoRegion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsoRegion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsoRegion: %w", err)
	}
	return oldValue.IsoRegion, nil
}

// ResetIsoRegion resets all changes to the "iso_region" field.
func (m *AirportMutation) ResetIsoRegion() {
	m.iso_region = nil
}

// SetMunicipality sets the "municipality" field.
func (m *AirportMutation) SetMunicipality(s string) {
	m.municipality = &s
}

// Municipality returns the value of the "municipality" field in the mutation.
func (m *AirportMutation) Municipality() (r string, exists bool) {
	v := m.municipality
	if v == nil {
		return
	}
	return *v, true
}

// OldMunicipality returns the old "municipality" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldMunicipality(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMunicipality is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMunicipality requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMunicipality: %w", err)
	}
	return oldValue.Municipality, nil
}

// ResetMunicipality resets all changes to the "municipality" field.
func (m *AirportMutation) ResetMunicipality() {
	m.municipality = nil
}

// SetScheduledService sets the "scheduled_service" field.
func (m *AirportMutation) SetScheduledService(s string) {
	m.scheduled_service = &s
}

// ScheduledService returns the value of the "scheduled_service" field in the mutation.
func (m *AirportMutation) ScheduledService() (r string, exists bool) {
	v := m.scheduled_service
	if v == nil {
		return
	}
	return *v, true
}

// OldScheduledService returns the old "scheduled_service" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldScheduledService(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScheduledService is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScheduledService requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScheduledService: %w", err)
	}
	return oldValue.ScheduledService, nil
}

// ResetScheduledService resets all changes to the "scheduled_service" field.
func (m *AirportMutation) ResetScheduledService() {
	m.scheduled_service = nil
}

// SetGpsCode sets the "gps_code" field.
func (m *AirportMutation) SetGpsCode(s string) {
	m.gps_code = &s
}

// GpsCode returns the value of the "gps_code" field in the mutation.
func (m *AirportMutation) GpsCode() (r string, exists bool) {
	v := m.gps_code
	if v == nil {
		return
	}
	return *v, true
}

// OldGpsCode returns the old "gps_code" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldGpsCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGpsCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGpsCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGpsCode: %w", err)
	}
	return oldValue.GpsCode, nil
}

// ResetGpsCode resets all changes to the "gps_code" field.
func (m *AirportMutation) ResetGpsCode() {
	m.gps_code = nil
}

// SetLocalCode sets the "local_code" field.
func (m *AirportMutation) SetLocalCode(s string) {
	m.local_code = &s
}

// LocalCode returns the value of the "local_code" field in the mutation.
func (m *AirportMutation) LocalCode() (r string, exists bool) {
	v := m.local_code
	if v == nil {
		return
	}
	return *v, true
}

// OldLocalCode returns the old "local_code" field's value of the Airport entity.
// If the Airport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AirportMutation) OldLocalCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocalCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocalCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocalCode: %w", err)
	}
	return oldValue.LocalCode, nil
}

// ResetLocalCode resets all changes to the "local_code" field.
func (m *AirportMutation) ResetLocalCode() {
	m.local_code = nil
}

// Where appends a list predicates to the AirportMutation builder.
func (m *AirportMutation) Where(ps ...predicate.Airport) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AirportMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AirportMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Airport, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AirportMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AirportMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Airport).
func (m *AirportMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AirportMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.ident != nil {
		fields = append(fields, airport.FieldIdent)
	}
	if m._type != nil {
		fields = append(fields, airport.FieldType)
	}
	if m.name != nil {
		fields = append(fields, airport.FieldName)
	}
	if m.latitude_deg != nil {
		fields = append(fields, airport.FieldLatitudeDeg)
	}
	if m.longitude_deg != nil {
		fields = append(fields, airport.FieldLongitudeDeg)
	}
	if m.elevation_ft != nil {
		fields = append(fields, airport.FieldElevationFt)
	}
	if m.continent != nil {
		fields = append(fields, airport.FieldContinent)
	}
	if m.iso_country != nil {
		fields = append(fields, airport.FieldIsoCountry)
	}
	if m.iso_region != nil {
		fields = append(fields, airport.FieldIsoRegion)
	}
	if m.municipality != nil {
		fields = append(fields, airport.FieldMunicipality)
	}
	if m.scheduled_service != nil {
		fields = append(fields, airport.FieldScheduledService)
	}
	if m.gps_code != nil {
		fields = append(fields, airport.FieldGpsCode)
	}
	if m.local_code != nil {
		fields = append(fields, airport.FieldLocalCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AirportMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case airport.FieldIdent:
		return m.Ident()
	case airport.FieldType:
		return m.GetType()
	case airport.FieldName:
		return m.Name()
	case airport.FieldLatitudeDeg:
		return m.LatitudeDeg()
	case airport.FieldLongitudeDeg:
		return m.LongitudeDeg()
	case airport.FieldElevationFt:
		return m.ElevationFt()
	case airport.FieldContinent:
		return m.Continent()
	case airport.FieldIsoCountry:
		return m.IsoCountry()
	case airport.FieldIsoRegion:
		return m.IsoRegion()
	case airport.FieldMunicipality:
		return m.Municipality()
	case airport.FieldScheduledService:
		return m.ScheduledService()
	case airport.FieldGpsCode:
		return m.GpsCode()
	case airport.FieldLocalCode:
		return m.LocalCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AirportMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case airport.FieldIdent:
		return m.OldIdent(ctx)
	case airport.FieldType:
		return m.OldType(ctx)
	case airport.FieldName:
		return m.OldName(ctx)
	case airport.FieldLatitudeDeg:
		return m.OldLatitudeDeg(ctx)
	case airport.FieldLongitudeDeg:
		return m.OldLongitudeDeg(ctx)
	case airport.FieldElevationFt:
		return m.OldElevationFt(ctx)
	case airport.FieldContinent:
		return m.OldContinent(ctx)
	case airport.FieldIsoCountry:
		return m.OldIsoCountry(ctx)
	case airport.FieldIsoRegion:
		return m.OldIsoRegion(ctx)
	case airport.FieldMunicipality:
		return m.OldMunicipality(ctx)
	case airport.FieldScheduledService:
		return m.OldScheduledService(ctx)
	case airport.FieldGpsCode:
		return m.OldGpsCode(ctx)
	case airport.FieldLocalCode:
		return m.OldLocalCode(ctx)
	}
	return nil, fmt.Errorf("unknown Airport field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AirportMutation) SetField(name string, value ent.Value) error {
	switch name {
	case airport.FieldIdent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdent(v)
		return nil
	case airport.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case airport.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case airport.FieldLatitudeDeg:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitudeDeg(v)
		return nil
	case airport.FieldLongitudeDeg:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitudeDeg(v)
		return nil
	case airport.FieldElevationFt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetElevationFt(v)
		return nil
	case airport.FieldContinent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContinent(v)
		return nil
	case airport.FieldIsoCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsoCountry(v)
		return nil
	case airport.FieldIsoRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsoRegion(v)
		return nil
	case airport.FieldMunicipality:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMunicipality(v)
		return nil
	case airport.FieldScheduledService:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScheduledService(v)
		return nil
	case airport.FieldGpsCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGpsCode(v)
		return nil
	case airport.FieldLocalCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocalCode(v)
		return nil
	}
	return fmt.Errorf("unknown Airport field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AirportMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude_deg != nil {
		fields = append(fields, airport.FieldLatitudeDeg)
	}
	if m.addlongitude_deg != nil {
		fields = append(fields, airport.FieldLongitudeDeg)
	}
	if m.addelevation_ft != nil {
		fields = append(fields, airport.FieldElevationFt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AirportMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case airport.FieldLatitudeDeg:
		return m.AddedLatitudeDeg()
	case airport.FieldLongitudeDeg:
		return m.AddedLongitudeDeg()
	case airport.FieldElevationFt:
		return m.AddedElevationFt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AirportMutation) AddField(name string, value ent.Value) error {
	switch name {
	case airport.FieldLatitudeDeg:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitudeDeg(v)
		return nil
	case airport.FieldLongitudeDeg:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitudeDeg(v)
		return nil
	case airport.FieldElevationFt:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddElevationFt(v)
		return nil
	}
	return fmt.Errorf("unknown Airport numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AirportMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AirportMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AirportMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Airport nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AirportMutation) ResetField(name string) error {
	switch name {
	case airport.FieldIdent:
		m.ResetIdent()
		return nil
	case airport.FieldType:
		m.ResetType()
		return nil
	case airport.FieldName:
		m.ResetName()
		return nil
	case airport.FieldLatitudeDeg:
		m.ResetLatitudeDeg()
		return nil
	case airport.FieldLongitudeDeg:
		m.ResetLongitudeDeg()
		return nil
	case airport.FieldElevationFt:
		m.ResetElevationFt()
		return nil
	case airport.FieldContinent:
		m.ResetContinent()
		return nil
	case airport.FieldIsoCountry:
		m.ResetIsoCountry()
		return nil
	case airport.FieldIsoRegion:
		m.ResetIsoRegion()
		return nil
	case airport.FieldMunicipality:
		m.ResetMunicipality()
		return nil
	case airport.FieldScheduledService:
		m.ResetScheduledService()
		return nil
	case airport.FieldGpsCode:
		m.ResetGpsCode()
		return nil
	case airport.FieldLocalCode:
		m.ResetLocalCode()
		return nil
	}
	return fmt.Errorf("unknown Airport field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AirportMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AirportMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AirportMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AirportMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AirportMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AirportMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AirportMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Airport unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AirportMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Airport edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	age           *int
	addage        *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldAge:
		return m.Age()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldAge:
		return m.OldAge(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
